#!/usr/bin/env python3
"""
Russia IP Ranges Generator + Hikvision/SmartPSS/Camera Ports
–í—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –†–æ—Å—Å–∏–∏ + —Ü–µ–ª–µ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø–æ—Ä—Ç–æ–≤ 80, 3000, 8000, 37777
"""

import ipaddress
import requests
import argparse
import os
from datetime import datetime

class RussiaIPGenerator:
    def __init__(self):
        # –ì–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è Hikvision (–ø–æ—Ä—Ç 8000)
        self.hikvision_hotspots = [
            # –†–æ—Å—Ç–µ–ª–µ–∫–æ–º - –º–∞—Å—Å–æ–≤—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Hikvision
            "31.173.0.0/16", "95.165.0.0/16", "178.140.0.0/16", "188.170.0.0/16",
            "62.109.0.0/16", "85.26.0.0/16", "79.141.0.0/16", "31.130.0.0/16",
            
            # –ú–¢–° - –±–∏–∑–Ω–µ—Å-–∫–ª–∏–µ–Ω—Ç—ã
            "37.9.0.0/16", "37.44.0.0/16", "46.180.0.0/16", "46.188.0.0/16",
            "37.110.0.0/16", "37.145.0.0/16",
            
            # –ë–∏–ª–∞–π–Ω
            "77.37.0.0/16", "78.36.0.0/16", "87.117.0.0/16", "89.22.0.0/16",
            "77.121.0.0/16", "78.107.0.0/16",
            
            # –î–æ–º.ru
            "109.111.0.0/16", "176.196.0.0/16", "176.197.0.0/16", "109.124.0.0/16",
            
            # TTK
            "85.26.0.0/16", "79.141.0.0/16", "93.170.0.0/16", "94.139.0.0/16",
            
            # –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ/–±–∏–∑–Ω–µ—Å —Å–µ—Ç–∏
            "85.113.0.0/16", "86.57.0.0/16", "95.24.0.0/16", "128.204.0.0/16",
            "176.108.0.0/16", "178.219.0.0/16", "188.186.0.0/16",
        ]
        
        # SmartPSS –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–ø–æ—Ä—Ç 3000)
        self.smartpss_hotspots = [
            # –ö—Ä—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Å–µ—Ç–∏
            "93.170.0.0/16", "94.139.0.0/16", "95.24.0.0/16",
            "109.124.0.0/16", "109.200.0.0/16", "128.204.0.0/16",
            "176.108.0.0/16", "178.219.0.0/16",
            
            # –°–µ—Ç–∏ —Å –æ—Ñ–∏—Å–Ω—ã–º–∏ –∫–∞–º–µ—Ä–∞–º–∏
            "85.113.0.0/16", "86.57.0.0/16", "87.117.0.0/16",
            "91.76.0.0/16", "91.224.0.0/16", "92.63.0.0/16"
        ]
        
        # –ü–æ—Ä—Ç 80 –≥–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏ (–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã)
        self.web_hotspots = [
            # –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å –º–∞—Å—Å–æ–≤—ã–º–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏
            "31.173.0.0/16", "95.165.0.0/16", "178.140.0.0/16",
            "37.9.0.0/16", "46.180.0.0/16", "77.37.0.0/16",
            "109.111.0.0/16", "176.196.0.0/16", "85.26.0.0/16"
        ]
        
        # –ü–æ—Ä—Ç 37777 –≥–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏ (–∫–∞–º–µ—Ä—ã Dahua/Hikvision)
        self.camera_37777_hotspots = [
            # –°–µ—Ç–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º IP-–∫–∞–º–µ—Ä
            "31.173.0.0/16", "95.165.0.0/16", "178.140.0.0/16",  # –†–æ—Å—Ç–µ–ª–µ–∫–æ–º
            "37.9.0.0/16", "46.180.0.0/16",                      # –ú–¢–°
            "77.37.0.0/16", "78.36.0.0/16",                      # –ë–∏–ª–∞–π–Ω
            "109.111.0.0/16", "176.196.0.0/16",                  # –î–æ–º.ru
            "85.26.0.0/16", "79.141.0.0/16",                     # TTK
            
            # –ë–∏–∑–Ω–µ—Å-—Å–µ—Ç–∏ (–æ—Ñ–∏—Å–Ω—ã–µ –∫–∞–º–µ—Ä—ã)
            "93.170.0.0/16", "94.139.0.0/16", "95.24.0.0/16",
            "109.124.0.0/16", "128.204.0.0/16",
            
            # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            "31.41.0.0/16", "46.138.0.0/16", "83.239.0.0/16",
            "89.189.0.0/16", "91.76.0.0/16", "92.63.0.0/16"
        ]

    def download_all_russia_ranges(self):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –í–°–ï –¥–∏–∞–ø–∞–∑–æ–Ω—ã –†–æ—Å—Å–∏–∏"""
        sources = [
            "http://www.ipdeny.com/ipblocks/data/countries/ru.zone",
            "https://raw.githubusercontent.com/herrbischoff/country-ip-blocks/master/ipv4/ru.cidr"
        ]
        
        all_cidr = []
        
        for url in sources:
            try:
                print(f"üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Å {url.split('/')[-1]}...")
                response = requests.get(url, timeout=15)
                if response.status_code == 200:
                    cidr_list = [line.strip() for line in response.text.splitlines() if line.strip() and not line.startswith('#')]
                    all_cidr.extend(cidr_list)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cidr_list)} CIDR –±–ª–æ–∫–æ–≤")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                continue
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_cidr = list(set(all_cidr))
        print(f"üìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CIDR –±–ª–æ–∫–æ–≤ –†–æ—Å—Å–∏–∏: {len(unique_cidr)}")
        return unique_cidr

    def cidr_to_range(self, cidr):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç CIDR –≤ –¥–∏–∞–ø–∞–∑–æ–Ω IP"""
        try:
            network = ipaddress.ip_network(cidr, strict=False)
            return f"{network.network_address}-{network.broadcast_address}"
        except Exception as e:
            return None

    def generate_specialized_ranges(self, all_russia_ranges):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø–æ—Ä—Ç–æ–≤"""
        
        # –í—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –†–æ—Å—Å–∏–∏
        all_ranges = []
        for cidr in all_russia_ranges:
            ip_range = self.cidr_to_range(cidr)
            if ip_range:
                all_ranges.append(ip_range)
        
        # Hikvision –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–ø–æ—Ä—Ç 8000)
        hikvision_ranges = []
        for cidr in self.hikvision_hotspots:
            ip_range = self.cidr_to_range(cidr)
            if ip_range and ip_range not in hikvision_ranges:
                hikvision_ranges.append(ip_range)
        
        # SmartPSS –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–ø–æ—Ä—Ç 3000)
        smartpss_ranges = []
        for cidr in self.smartpss_hotspots:
            ip_range = self.cidr_to_range(cidr)
            if ip_range and ip_range not in smartpss_ranges:
                smartpss_ranges.append(ip_range)
        
        # –ü–æ—Ä—Ç 80 –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        web_ranges = []
        for cidr in self.web_hotspots:
            ip_range = self.cidr_to_range(cidr)
            if ip_range and ip_range not in web_ranges:
                web_ranges.append(ip_range)
        
        # –ü–æ—Ä—Ç 37777 –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–∫–∞–º–µ—Ä—ã)
        camera_37777_ranges = []
        for cidr in self.camera_37777_hotspots:
            ip_range = self.cidr_to_range(cidr)
            if ip_range and ip_range not in camera_37777_ranges:
                camera_37777_ranges.append(ip_range)
        
        return {
            "all_russia": all_ranges,
            "hikvision_8000": hikvision_ranges,
            "smartpss_3000": smartpss_ranges,
            "web_80": web_ranges,
            "camera_37777": camera_37777_ranges
        }

    def save_ranges(self, ranges_dict, output_dir="russia_ranges"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        saved_files = []
        
        for range_type, ranges in ranges_dict.items():
            filename = os.path.join(output_dir, f"{range_type}.txt")
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"# Russia IP Ranges - {range_type.upper()}\n")
                f.write(f"# Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"# Total ranges: {len(ranges)}\n\n")
                
                for ip_range in ranges:
                    f.write(f"{ip_range}\n")
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {filename} ({len(ranges):,} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)")
            saved_files.append(filename)
        
        return saved_files

    def create_combined_file(self, ranges_dict, output_file="all_russia_combined.txt"):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏"""
        
        all_combined = []
        for ranges in ranges_dict.values():
            all_combined.extend(ranges)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_ranges = list(set(all_combined))
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(f"# ALL RUSSIA IP RANGES + HIKVISION + SMARTPSS + CAMERAS\n")
            f.write(f"# Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"# Includes: All Russia + Hikvision(8000) + SmartPSS(3000) + Web(80) + Cameras(37777)\n")
            f.write(f"# Total unique ranges: {len(unique_ranges)}\n\n")
            
            for ip_range in unique_ranges:
                f.write(f"{ip_range}\n")
        
        print(f"üéØ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {output_file} ({len(unique_ranges):,} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)")
        return output_file

    def generate_scan_configs(self, ranges_dict):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        configs_dir = "scan_configs"
        if not os.path.exists(configs_dir):
            os.makedirs(configs_dir)
        
        # –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è Masscan
        masscan_config = f"""# Masscan config for Russia IP ranges
# Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

rate = 10000
ports = 80,3000,8000,37777,443,554,8080,7200
range = all_russia_combined.txt
output-format = xml
output-filename = russia_scan.xml
banners = true
http-user-agent = Mozilla/5.0
"""
        
        with open(os.path.join(configs_dir, "masscan_russia.conf"), 'w') as f:
            f.write(masscan_config)
        
        # –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è Nmap
        nmap_script = f"""# Nmap scan for Russia targets
# Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

# Quick port scan (–≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã)
nmap -iL all_russia_combined.txt -p 80,3000,8000,37777 --open -T4 -oA russia_quick

# Hikvision specific
nmap -iL hikvision_8000.txt -p 8000,80,443,554 --script http-title -T4 -oA hikvision_scan

# SmartPSS specific  
nmap -iL smartpss_3000.txt -p 3000,7200,7201 --script banner -T4 -oA smartpss_scan

# Web interfaces
nmap -iL web_80.txt -p 80,443,8080 --script http-title,http-headers -T4 -oA web_scan

# Camera port 37777 (Dahua/Hikvision)
nmap -iL camera_37777.txt -p 37777 --script banner -sV -T4 -oA camera_37777_scan

# Comprehensive camera scan
nmap -iL all_russia_combined.txt -p 80,443,554,8000,8080,37777,3000 --script http-title,rtsp-methods -T4 -oA comprehensive_camera_scan
"""
        
        with open(os.path.join(configs_dir, "nmap_commands.txt"), 'w') as f:
            f.write(nmap_script)

        # –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è NESCA
        nesa_ports = "80,3000,8000,37777,443,554,8080,7200,8443"
        nesa_config = f"""# NESCA config for Russia camera scan
# Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
PORTS = {nesa_ports}

# –§–∞–π–ª —Å —Ü–µ–ª—è–º–∏
TARGET_FILE = all_russia_combined.txt

# –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
# - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å HTTP –¥–ª—è –ø–æ—Ä—Ç–æ–≤ 80,443,8000,8080
# - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å RTSP –¥–ª—è –ø–æ—Ä—Ç–∞ 554
# - –î–ª—è –ø–æ—Ä—Ç–∞ 37777 –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ banner grabbing
# - –î–ª—è –ø–æ—Ä—Ç–∞ 3000 –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ SmartPSS

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è NESCA:
# nesa --file all_russia_combined.txt --ports {nesa_ports} --http --rtsp
"""
        
        with open(os.path.join(configs_dir, "nesca_config.txt"), 'w') as f:
            f.write(nesa_config)
        
        print(f"üîß –ö–æ–Ω—Ñ–∏–≥–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–∞–ø–∫–µ: {configs_dir}")
        return configs_dir

def main():
    banner = """
    üåê Russia IP Ranges Generator + Camera Ports
    üìä –í–°–ï –¥–∏–∞–ø–∞–∑–æ–Ω—ã –†–æ—Å—Å–∏–∏ + —Ü–µ–ª–µ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø–æ—Ä—Ç–æ–≤
    üéØ –ü–æ—Ä—Ç—ã: 80 (–≤–µ–±), 3000 (SmartPSS), 8000 (Hikvision), 37777 (–∫–∞–º–µ—Ä—ã)
    """
    print(banner)
    
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—Å–µ—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏ + —Ü–µ–ª–µ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã')
    parser.add_argument('-o', '--output', default='all_russia_combined.txt',
                       help='–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: all_russia_combined.txt)')
    parser.add_argument('-d', '--directory', default='russia_ranges',
                       help='–ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: russia_ranges)')
    parser.add_argument('-c', '--configs', action='store_true',
                       help='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
    
    args = parser.parse_args()
    
    generator = RussiaIPGenerator()
    
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏...")
    all_russia_cidr = generator.download_all_russia_ranges()
    
    if not all_russia_cidr:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã –†–æ—Å—Å–∏–∏")
        return
    
    print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤...")
    ranges_dict = generator.generate_specialized_ranges(all_russia_cidr)
    
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    saved_files = generator.save_ranges(ranges_dict, args.directory)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    combined_file = generator.create_combined_file(ranges_dict, args.output)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.configs:
        generator.generate_scan_configs(ranges_dict)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"üåê –í—Å–µ–≥–æ –†–æ—Å—Å–∏—è: {len(ranges_dict['all_russia']):,} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤")
    print(f"üéØ Hikvision (8000): {len(ranges_dict['hikvision_8000']):,} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤") 
    print(f"üîß SmartPSS (3000): {len(ranges_dict['smartpss_3000']):,} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤")
    print(f"üåç Web (80): {len(ranges_dict['web_80']):,} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤")
    print(f"üìπ Cameras (37777): {len(ranges_dict['camera_37777']):,} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤")
    print(f"üöÄ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {combined_file}")
    
    print(f"\nüéØ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:")
    print(f"  ‚Ä¢ –í—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã: {args.output}")
    print(f"  ‚Ä¢ Hikvision (8000): {args.directory}/hikvision_8000.txt")
    print(f"  ‚Ä¢ SmartPSS (3000): {args.directory}/smartpss_3000.txt") 
    print(f"  ‚Ä¢ Web (80): {args.directory}/web_80.txt")
    print(f"  ‚Ä¢ Cameras (37777): {args.directory}/camera_37777.txt")
    print(f"\n‚ö° –î–ª—è NESCA –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {args.output}")
    print(f"üéØ –ö–ª—é—á–µ–≤—ã–µ –ø–æ—Ä—Ç—ã: 80, 3000, 8000, 37777")

if __name__ == "__main__":
    main()