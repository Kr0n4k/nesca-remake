#ifndef VULNERABILITYSCANNER_H
#define VULNERABILITYSCANNER_H

#include <QString>
#include <QStringList>
#include <QMap>
#include <QJsonObject>
#include <QList>

struct Vulnerability {
    QString cveId;
    QString title;
    QString description;
    QString severity;  // Critical, High, Medium, Low
    float cvssScore;
    QString affectedVersion;
    QString fixedVersion;
    QStringList references;
    bool confirmed;  // Whether vulnerability is confirmed on this device
};

struct VulnScanResult {
    QString deviceIP;
    int devicePort;
    QString deviceType;
    QString manufacturer;
    QString model;
    QString firmwareVersion;
    QList<Vulnerability> vulnerabilities;
    int criticalCount;
    int highCount;
    int mediumCount;
    int lowCount;
    QJsonObject scanMetadata;
};

class VulnerabilityScanner {
private:
    static QMap<QString, QList<Vulnerability>> cveDatabase;
    static void initializeCVEDatabase();
    
    static bool checkVulnerability(const QString& ip, int port, 
                                   const Vulnerability& vuln,
                                   const QString& deviceType,
                                   const QString& firmwareVersion);
    static bool checkPathExists(const QString& ip, int port, const QString& path);
    static QString getResponseHeader(const QString& ip, int port, 
                                    const QString& headerName);
    static bool checkVersionPattern(const QString& version, 
                                   const QString& pattern);
    
    // Specific vulnerability checks
    static bool checkCVE_2021_36260(const QString& ip, int port);  // Hikvision
    static bool checkCVE_2021_33045(const QString& ip, int port);  // Dahua
    static bool checkCVE_2017_7921(const QString& ip, int port);   // Hikvision
    static bool checkCVE_2021_34991(const QString& ip, int port);  // Hikvision
    static bool checkCVE_2022_30525(const QString& ip, int port);  // Zyxel
    
public:
    VulnerabilityScanner();
    
    // Scan device for vulnerabilities
    static VulnScanResult scanDevice(const QString& ip, int port,
                                    const QString& deviceType,
                                    const QString& manufacturer,
                                    const QString& model,
                                    const QString& firmwareVersion);
    
    // Get vulnerabilities for specific manufacturer/model
    static QList<Vulnerability> getVulnerabilitiesForDevice(
        const QString& manufacturer,
        const QString& model,
        const QString& firmwareVersion);
    
    // Quick check if device has known critical vulnerabilities
    static bool hasCriticalVulnerabilities(const QString& manufacturer,
                                          const QString& model,
                                          const QString& firmwareVersion);
};

#endif // VULNERABILITYSCANNER_H

